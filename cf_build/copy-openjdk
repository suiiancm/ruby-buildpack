#!/usr/bin/env ruby
require 'tmpdir' 
require 'digest/md5'
require 'highline/import'

gof3r_path = File.join(File.expand_path(File.dirname(__FILE__)), 'vendor', 'gof3r')

def usage
  puts "usage:"
  puts "  copy-openjdk <openjdk_name>"
  puts
  puts "  openjdk_name is the Java version to copy -- (e.g. 'openjdk1.8-latest')"
  exit(1)
end

def openjdk_name
  usage unless ARGV[0]
  return ARGV[0]
end

def heroku_stack cf_stack
  mappings = {
    'lucid64' => 'cedar',
    'cflinuxfs2' => 'cedar-14'
  }
  mappings.fetch(cf_stack)
end

def cf_stacks
  %w{lucid64 cflinuxfs2}
end

def get_source_openjdk_binary cf_stack, target_directory
  Dir.chdir(target_directory) do
    `wget -q https://lang-jvm.s3.amazonaws.com/jdk/#{heroku_stack(cf_stack)}/#{openjdk_name}.tar.gz`
    File.join(target_directory, "#{openjdk_name}.tar.gz")
  end
end

def get_target_openjdk_binary cf_stack, target_directory
  Dir.chdir(target_directory) do
    # wget always writes to the -O file, we remove it if wget couldnt find the file.
    `wget -q https://pivotal-buildpacks.s3.amazonaws.com/ruby/binaries/#{cf_stack}/#{openjdk_name}.tar.gz -O #{openjdk_name}.tar.gz.target || rm -rf #{openjdk_name}.tar.gz.target`
    File.join(target_directory, "#{openjdk_name}.tar.gz.target")
  end
end

cf_stacks.each do |stack| 
  Dir.mktmpdir do |temp_dir|
    source_openjdk_path = get_source_openjdk_binary(stack, temp_dir)
    source_md5 = Digest::MD5.file(source_openjdk_path).hexdigest

    target_openjdk_path = get_target_openjdk_binary(stack, temp_dir)

    if File.exist?(target_openjdk_path) then
      target_md5 = Digest::MD5.file(target_openjdk_path).hexdigest

      puts "#{openjdk_name} already exists on s3 for the '#{stack}' stack."
      puts "source md5: #{source_md5}"
      puts "target md5: #{target_md5}"

      next unless HighLine.agree("Are you sure you want to override the target? [yes|no]")
    end

    Dir.chdir(temp_dir) do
      output = `#{gof3r_path} cp #{openjdk_name}.tar.gz s3://pivotal-buildpacks/ruby/binaries/#{stack}/#{openjdk_name}.tar.gz 2>&1`
      raise "Could not put binary on s3:\n\nOutput from command:\n\n#{output}" unless $?.success?
    end

    puts "uri: https://pivotal-buildpacks.s3.amazonaws.com/ruby/binaries/#{stack}/#{openjdk_name}.tar.gz"
    md5 = Digest::MD5.file("#{temp_dir}/#{openjdk_name}.tar.gz").hexdigest
    puts "md5: #{md5}"
    puts "cf_stacks: \n  - #{stack}\n\n"
  end
end
