// Code generated by MockGen. DO NOT EDIT.
// Source: release.go

// Package finalize_test is a generated GoMock package.
package finalize_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVersions is a mock of Versions interface
type MockVersions struct {
	ctrl     *gomock.Controller
	recorder *MockVersionsMockRecorder
}

// MockVersionsMockRecorder is the mock recorder for MockVersions
type MockVersionsMockRecorder struct {
	mock *MockVersions
}

// NewMockVersions creates a new mock instance
func NewMockVersions(ctrl *gomock.Controller) *MockVersions {
	mock := &MockVersions{ctrl: ctrl}
	mock.recorder = &MockVersionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVersions) EXPECT() *MockVersionsMockRecorder {
	return m.recorder
}

// HasGem mocks base method
func (m *MockVersions) HasGem(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasGem", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasGem indicates an expected call of HasGem
func (mr *MockVersionsMockRecorder) HasGem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasGem", reflect.TypeOf((*MockVersions)(nil).HasGem), arg0)
}

// GemMajorVersion mocks base method
func (m *MockVersions) GemMajorVersion(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GemMajorVersion", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GemMajorVersion indicates an expected call of GemMajorVersion
func (mr *MockVersionsMockRecorder) GemMajorVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GemMajorVersion", reflect.TypeOf((*MockVersions)(nil).GemMajorVersion), arg0)
}

// HasGemVersion mocks base method
func (m *MockVersions) HasGemVersion(arg0 string, arg1 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasGemVersion", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasGemVersion indicates an expected call of HasGemVersion
func (mr *MockVersionsMockRecorder) HasGemVersion(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasGemVersion", reflect.TypeOf((*MockVersions)(nil).HasGemVersion), varargs...)
}
